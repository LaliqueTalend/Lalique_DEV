// ============================================================================
//
// Copyright (C) 2018 LALIQUE SA - 
//
// ============================================================================
package routines;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
//import java.text.NumberFormat;
//import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
//import java.util.Locale;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class JDE {

    private static final java.util.Map<String, String> str_Hash = new java.util.HashMap<String, String>();

	/**
     * Convertit une valeur de type <code>BigDecimal</code> en valeur de type <code>Double</code> (renvoie 0 si la valeur est nulle)
     * 
     * @param value : <code>BigDecimal</code> - valeur à convertir.
     * 
     * @return valeur de type <code>Double</code>
     * <hr>
     * 
     * {talendTypes} Double
     * 
     * {Category} Lalique Defined
     * 
     * {param} BigDecimal value
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static Double cnvDouble(BigDecimal value)
    {
	    if(value == null)
	    {
	    	return 0d;
	    }
	    else
	    {
	    	return value.doubleValue();
	    }
    }
    
    /**
     * Convertit une valeur de type <code>BigDecimal</code> en valeur de type <code>Float</code> (renvoie 0 si la valeur est nulle)
     * 
     * @param value : <code>BigDecimal</code> valeur à convertir.
     * 
     * @return valeur de type <code>Float</code>
     * <hr>
     * 
     * {talendTypes} Float
     * 
     * {Category} Lalique Defined
     * 
     * {param} BigDecimal value
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static float cnvFloat(BigDecimal value)
    {
	    if(value == null)
	    {
	    	return 0;
	    }
	    else
	    {
	    	return value.floatValue();
	    }
    }
    
    /**
     * Convertit une valeur de type <code>BigDecimal</code> en valeur de type <code>Integer</code> (renvoie 0 si la valeur est nulle)
     * 
     * @param value : <code>BigDecimal</code> valeur à convertir.
     * 
     * @return valeur de type <code>Integer</code>
     * <hr>
     * 
     * {talendTypes} int
     * 
     * {Category} Lalique Defined
     * 
     * {param} BigDecimal value
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static int cnvInt(BigDecimal value)
    {
	    if(value == null)
	    {
	    	return 0;
	    }
	    else
	    {
	    	return value.intValue();
	    }
    }
    
	/**
     * Renvoie un nombre sous forme d'une chaîne de caractères formatée.
     * 
     * @param value : <code>Double</code> - nombre à formater.
     * @param pattern : <code>String</code> - format de nombre à appliquer (indiqué au format US ex : #,##0.00").
     * @param USFormat : <code>Boolean</code> - appliquer le format US (décimale = point).
     * 
     * @return Une valeur de type <code>String</code> représentant le nombre formaté.
     * </br><b>Exemple:</b>
     * <em>Afficher le nombre 1234.567 au format "#,##0.00" en utilisant le format US</em></br>
     * <code>  cnvString(1234.567, "#,##0.00", true) ==> 1,234.57</code>
     * <hr>
     * 
     * {talendTypes} String
     * 
     * {Category} Lalique Defined
     * 
     * {param} Double value
     * {param} String pattern
     * {param} Boolean formatUS
     * </br>
     * created : 07/07/2020 - Philippe BONGARD</br>
     * version : 1.0
     */
	public static String cnvString(double value, String pattern, boolean USFormat)
	{
//		NumberFormat nf = NumberFormat.getInstance(Locale inLocale);
		DecimalFormat dfmt = new DecimalFormat(pattern);
		if (USFormat) {
//			nf = NumberFormat.getInstance(Locale.US);
			DecimalFormatSymbols dfs = new DecimalFormatSymbols();
			dfs.setDecimalSeparator('.');
			dfs.setGroupingSeparator(',');
			dfmt.setDecimalFormatSymbols(dfs);
		}
			else {
		}
		return dfmt.format(value);
//		return nf.format(value);
	}

	/**
     * Renvoie un nombre sous forme d'une chaîne de caractères formatée.
     * 
     * @param value : <code>Double</code> - nombre à formater.
     * @param pattern : <code>String</code> - format de nombre à appliquer (indiqué au format US ex : #,##0.00").
     * 
     * @return Une valeur de type <code>String</code> représentant le nombre formaté.
     * </br><b>Exemple:</b>
     * <em>Afficher le nombre 1234.567 au format "#,##0.00"</em></br>
     * <code>  cnvString(1234.567, "#,##0.00", true) ==> 1 234,57</code>
     * <hr>
     * 
     * {talendTypes} String
     * 
     * {Category} Lalique Defined
     * 
     * {param} Double value
     * {param} String pattern
     * </br>
     * created : 07/07/2020 - Philippe BONGARD</br>
     * version : 1.0
     */
	public static String cnvString(double value, String pattern)
	{
		DecimalFormat dfmt = new DecimalFormat(pattern);
		return dfmt.format(value);
	}
	
    /**
     * Renvoie une date au format Julian JDE (integer).
     * </br><b>Exemple :</b> Convertir la date 04/02/2020 en format Julian de JDE.<pre>    <code>convertFromJulian(04/02/2020)</code> --> 120035</pre>
     * 
     * @param date : <code>Date</code> - Date à convertir.
     * 
     * @return La date au format Julian (int)
     * <hr>
     * 
     * {talendTypes} int
     * 
     * {Category} Lalique Defined
     * 
     * {param} Date date
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static int convertToJulian(Date date) 
    {
    	Calendar pDate = Calendar.getInstance();
        pDate.setTime(date);
        return (pDate.get(Calendar.YEAR)-1900)*1000 + pDate.get(Calendar.DAY_OF_YEAR);
    }
    
    /**
     * Renvoie une date julien JDE (SAAJJJ) de type <code>BigDecimal</code> au format <code>Date</code>.
     * </br><b>Exemple :</b> Convertir le champ SZUPMJ de la table F4101 en date.<pre>    <code>convertFromJulian(F4101.SZUPMJ)</code></pre>
     * 
     * @param JDEField : <code>BigDecimal</code> date au format julien.
     * 
     * @return La date au format <code>Date</code> de Java
     * <hr>
     * 
     * {talendTypes} Date
     * 
     * {Category} Lalique Defined
     * 
     * {param} BigDecimal JDEField
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static Date convertFromJulian(BigDecimal JDEField) 
    {
	    if(JDEField == null)
	    {
	    	return convertFromJulian(0);
	    }
	    else
	    {
	    	return convertFromJulian(JDEField.intValue());
	    }
    }

    /**
     * Renvoie une date julien JDE (SAAJJJ) de type <code>Integer</code> au format <code>Date</code>.
     * </br><b>Exemple :</b> Convertir la valeur 120035 en date.<pre>    <code>convertFromJulian(120035)</code> --> 04/02/2020</pre>
     * 
     * @param julianDate : <code>Integer</code> date au format julien.
     * 
     * @return La date au format <code>Date</code> de Java (Oracle)
     * <hr>
     * 
     * {talendTypes} Date
     * 
     * {Category} Lalique Defined
     * 
     * {param} int julianDate
     * </br>
     * created : 24/04/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static Date convertFromJulian(int julianDate) 
    {
	    Calendar pDate = Calendar.getInstance();
	    pDate.set(0, 0, 1); //01/01/1970
	    
	    if(julianDate != 0) {
			 int pYear, pDays;
			 pYear = Math.round(julianDate / 1000) + 1900; 
			 pDays = Math.floorMod(julianDate, 1000);

		     pDate.set(pYear, Calendar.JANUARY, pDays);
	    }
	    return pDate.getTime();
    }

    /**
     * Renvoie une valeur temps JDE (hhmmss) de type <code>Integer</code> au format <code>Date</code>.
     * </br><b>Exemple :</b> Convertir la valeur 143527 en date.<pre>    <code>convertFromTime(143527)</code> --> 14:35:27</pre>
     * 
     * @param timeValue : <code>Integer</code> Heure au format JDE.
     * 
     * @return L'heure au format <code>Date</code> de Java (Oracle)
     * <hr>
     * 
     * {talendTypes} Date
     * 
     * {Category} Lalique Defined
     * 
     * {param} Integer timeValue
     * </br>
     * created : 12/08/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static Date convertFromTime(int timeValue) 
    {
	    Calendar pDate = Calendar.getInstance();
	    pDate.set(0, 0, 1); //01/01/1970
	    
	    if(timeValue != 0) {
			 int pTime, pHour, pMinute, pSecond;
			 pTime=timeValue;
			 pHour = Math.round(pTime / 10000);
			 pTime -= pHour * 10000;
			 pMinute = Math.round(pTime / 100);
			 pSecond = Math.floorMod(pTime, 100);

		     pDate.set(0, Calendar.JANUARY, 1, pHour, pMinute, pSecond);
	    }
	    return pDate.getTime();
    }

    /**
     * Renvoie une valeur temps JDE (hhmmss) de type <code>BigDecimal</code> au format <code>Date</code>.
     * </br><b>Exemple :</b> Convertir le champ WTTDAY en date.<pre>    <code>convertFromTime(WTTDAY)</code> --> 14:35:27</pre>
     * 
     * @param JDEField : <code>BigDecimal</code> Heure au format JDE.
     * 
     * @return L'heure au format <code>Date</code> de Java (Oracle)
     * <hr>
     * 
     * {talendTypes} Date
     * 
     * {Category} Lalique Defined
     * 
     * {param} BigDecimal JDEField
     * </br>
     * created : 12/08/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static Date convertFromTime(BigDecimal JDEField) 
    {
	    if(JDEField == null)
	    {
	    	return convertFromTime(0);
	    }
	    else
	    {
	    	return convertFromTime(JDEField.intValue());
	    }
    }

    /**
     * convertToJulian: return date converted in Julian format
     * 
     * {talendTypes} int
     * 
     * {Category} Lalique Defined
     * 
     * {param} string("theDate") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static int convertToJulian(String theDate)
    {
	    /* Date: ddmmyyyy*/
	    int resultJulian = 0;
	    if(theDate.length() > 0)
	    {
			 String dayS, monthS, yearS;
			 /*Days of month*/
			 int[] monthValues = {31,28,31,30,31,30,31,31,30,31,30,31};
			 dayS = theDate.substring(0,2);
			 monthS = theDate.substring(2, 4);
			 yearS = theDate.substring(4, 8);
			
			 /*Convert to Integer*/
		     int day = Integer.valueOf(dayS);
		     int month = Integer.valueOf(monthS);
		     int year = Integer.valueOf(yearS); 
			
			 //Leap year check
			 if(year % 4 == 0)
			 {
				  monthValues[1] = 29;    
			 }
			
			 //Start building Julian date
			 String julianDate = "1";
			 //last two digit of year: 20xx ==> xx
			 julianDate += yearS.substring(2,4);
			 int julianDays = 0;
			 for (int i=0; i < month-1; i++)
			 {
			    julianDays += monthValues[i];
			 }
			 julianDays += day;
			 //Check size of days number
			 if( julianDays < 100)
			 {
			    julianDate += "0";
			 }
			 if( julianDays < 10)
			 {
			    julianDate += "0";
	         }
	         julianDate += String.valueOf(julianDays);
		     resultJulian =  Integer.valueOf(julianDate);    
	    }
	    return resultJulian;
    }

	/**
	 * Arrondi à l'int le plus proche de l'argument en paramètre.
	 *
	 * {talendTypes} int | Int
	 *
	 * {Category} 
	 *
	 * {param} float(3.14f)
	 *
	 * {example} roundDown(3.14f)
	 */
  	public static int roundDown(float a) {
  		// this check for NaN, from JLS 15.21.1, saves a method call
  		float incrn = -0.000000000001f;
  		if (a != a)
  			return 0;
  		return (int) Math.floor(a < 0 ? a + incrn : a );
}


  	/**
  	 * Arrondi au float le plus proche de l'argument en paramètre.
  	 *
  	 * {talendTypes} long | Long
  	 *
  	 * {Category} 
  	 *
  	 * {param} double(3.14)
  	 *
  	 * {example} roundDown(3.14)
  	 */
  	public static long roundDown(double a) {
  		// this check for NaN, from JLS 15.21.1, saves a method call
  		double incrn = -0.000000000001d;
  		if (a != a)
  			return 0;
  		return (long) Math.floor(a < 0 ? a + incrn : a );
}

    /**
     * Arrondi à l'int le plus proche de l'argument en paramètre.
     *
     * {talendTypes} int | Int
     *
     * {Category} 
     *
     * {param} float(3.14f)
     *
     * {example} round(3.14f)
     */
      public static int round(float a) {
      // this check for NaN, from JLS 15.21.1, saves a method call
            if (a != a)
           return 0;
        return (int) Math.round(Math.abs(a)) * (a < 0 ? -1 : 1 );
    }

   
    /**
     * Arrondi au float le plus proche de l'argument en paramètre.
     *
     * {talendTypes} long | Long
     *
     * {Category} 
     *
     * {param} double(3.14)
     *
     * {example} round(3.14)
     */
    public static long round(double a) {
      // this check for NaN, from JLS 15.21.1, saves a method call
      if (a != a)
           return 0;
        return (long) Math.round(Math.abs(a)) * (a < 0 ? -1 : 1 );
    }

    /**
     * getPlannedQuantity : Renvoie la quantité attendue de l'OF selon le type d'OF. Si OF Verre Froid, c'est la quantité sortie, sinon c'est la quantité attendue.
     *
     * @param WOType : <code>String</code> Type d'OF (1 car.)
	 * @param standardQty : <code>Float</code> Quantité attendue de l'OF.
	 * @param declaredQty : <code>Float</code> Quantité déclarée et sortie du stock brut.
	 * 
     * @return valeur de type <code>Float</code> Quantité à prendre en compte
     * </br><b>Exemple:</b> 
     * <em>Un OF Verre Froid quantité attendue 10, quantité sortie de stock brut 12</em></br>
     * <code>  JDE.getPlannedQuantity(SYTYPS,SYUORG,COUORG) ==> 12</code>
     * <hr>
	 *
     * {talendTypes} Float
     *
     * {Category} Lalique Defined
     *
     * {param} String("") WOType : type de l'OF
     * {param} Float(0) standardQty :
     * {param} Float(0) declaredQty :
	 * </br>
     * created : 09/07/2020 - Philippe BONGARD</br>
     * version : 1.0
     */
	public static Float getPlannedQuantity(String WOType,float standardQty,float declaredQty)
	{
		if(WOType == "F" && declaredQty != 0) {
			return declaredQty;
		}else {
			return standardQty;
		}
	}
	
	/** 
	 * Indique si l'opération doit être envoyée à Quartis.
     * 
     * @param TYPS : <code>String</code> Type d'OF (1 car.)
	 * @param RP14 : <code>String</code> Catégorie du Centre de Charge : F-Fictif, R-Réparation, . . .
	 * @param BFPF : <code>String</code> Point de comptage de l'opération
	 * 
     * @return valeur de type <code>boolean</code> indiquant si l'opération doit être envoyée (true) ou non (false)</br>
     * <b>Remarques:</b></br>
     * Sont considérées comme étant des opérations non Quartis :
     * <li>les opérations dont le centre de charge est fictif.</li>
     * <li>les opérations de réparation sur les OF de non réparation dont le code catégorie CC est égal à 'R' ou 'Y' et dont le point de comptage est égal à '0'</li>
     * </br><b>Exemple:</b> 
     * <em>Déterminer si l'opération d'un OF Verre Froid doit être envoyée à Quartis
     * (où SYTYPS='F', MCRP14='F  ', WLBFPF=' ')</em></br>
     * <code>  JDE.isOpeQuartis(SYTYPS,MCRP14,WLBFPF) ==> false</code>
     * <hr>
     * 
     * {talendTypes} boolean
     * 
     * {Category} Lalique Defined
	 *
	 * {param} String("") TYPS
	 * {param} String("") RP14
	 * {param} String("") BFPF
	 * </br>
     * created : 09/07/2020 - Philippe BONGARD</br>
     * versions:</br>
     *  1.0 - 09/07/20 - Création</br>
     *  1.1 - 01/10/20 - S'assure que les valeurs passées ne sont pas nulles
	 */
	public static boolean isOpeQuartis(String TYPS, String RP14, String BFPF)
	{
		Boolean myVal = true;
		if (TYPS==null) {TYPS=" ";}
		if (RP14==null) {RP14=" ";}
		if (BFPF==null) {BFPF=" ";}
		
		if(RP14==null || RP14.trim().equals("F")) {
			myVal=false;
		}
		if(!(TYPS.trim().equals("R"))) {
			if((RP14.trim().equals("R") || RP14.trim().equals("Y")) && BFPF.trim().equals("0")) {
				myVal=false;
			}
		}
		return myVal;
	}

	/**
     * Efface une variable préalablement sauvegardée par la fonction <code>stringSet</code>.
     * 
     * @param name : <code>String</code> - nom de la variable.
     * 
     * </br><b>Exemple:</b>
     * <code>  stringClear("DSC1")
     * <hr>
     * 
     * {talendTypes} Void
     * 
     * {Category} Lalique Defined
     * 
     * {param} String("") name
     * </br>
     * created : 26/08/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static void stringClear(String name) {
        if (str_Hash.containsKey(name)) {
            str_Hash.remove(name);
        }
    }
    
	/**
     * Renvoie une valeur de type <code>String</code> préalablement sauvegardée par la fonction <code>stringSet</code>.
     * 
     * @param name : <code>String</code> - nom de la variable.
     * 
     * @return La valeur de type <code>String</code> sauvegardée.
     * </br><b>Exemple:</b>
     * <code>  stringGet("DSC1") ==> "ma description"
     * <hr>
     * 
     * {talendTypes} String
     * 
     * {Category} Lalique Defined
     * 
     * {param} String("") name
     * </br>
     * created : 26/08/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static String stringGet(String name) {
        if (str_Hash.containsKey(name)) {
            return str_Hash.get(name);
        } else {
            return null;
        }
    }

	/** 
	 * Renvoie une chaîne de caractères de longueur donnée en alignant le texte à droite.
     * 
     * @param text : <code>String</code> Texte à aligner à droite.
	 * @param size : <code>Integer</code> Longueur de la chaîne souhaitée 
	 * 
     * @return valeur de type <code>String</code> Chaîne de caractères de longueur (size) avec le texte aligné à droite.
     * </br><b>Exemple:</b> 
     * <em>Aligner un code magasin à droite dans un champ de 12 caractères :</em></br>
     * <code>  JDE.stringRAB("10WU", 12) ==> '........10WU'</code></br>
     * <code>  JDE.stringRAB("UDC...", 12) ==> '......UDC...'</code></br>
     * <i> NB: les '.' représentent des espaces</i>
     * <hr>
     * 
     * {talendTypes} String
     * 
     * {Category} Lalique Defined
	 *
	 * {param} String("") text
	 * {param} Integer() size
	 * </br>
     * created : 03/08/2020 - Philippe BONGARD</br>
     * version : 1.0
	 */
	public static String stringRAB(String text, int size)
	{
        StringBuffer pBuffer = new StringBuffer();
        for (int i = 0; i < size; i++) {
            pBuffer.append(" ");
        }
        String pStr = pBuffer.toString() + text;
        return pStr.substring(pStr.length() - Math.min(pStr.length(), size));
	}

	/**
     * Sauvegarde une valeur de type <code>String</code> dans une table sous un nom libre.</br>
     * Cette valeur peut être retrouvée tout au long de l'execution du Job.
     * 
     * @param name : <code>String</code> - nom de la variable.
     * @param value : <code>String</code> - valeur à sauvegarder.
     * 
     * @return La valeur sauvegardée.
     * </br><b>Exemple:</b>
     * <code>  stringSet("DSC1", "ma description")
     * <hr>
     * 
     * {talendTypes} String
     * 
     * {Category} Lalique Defined
     * 
     * {param} String("") name
     * {param} String("") value
     * </br>
     * created : 26/08/2020 - Philippe Bongard</br>
     * version : 1.0
     */
    public static String stringSet(String name, String value) {
    	str_Hash.put(name, value);
    	return value;
    }

}